package com.verizon.delphi.msvcs.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.verizon.delphi.dms.config.CommonService;
import com.verizon.delphi.dms.exception.CommonServiceException;
import com.verizon.delphi.msvcs.dao.SnakeTestDao;
import com.verizon.delphi.msvcs.request.model.BERTS;
import com.verizon.delphi.msvcs.request.model.Data;

@Component
public class SnakeTestValidator {
	private static final Logger logger = LoggerFactory.getLogger(SnakeTestValidator.class);

	@Autowired
	SnakeTestDao snakeTestDao;

	@Autowired
	public CommonService commonService;
	/*
	 * @Autowired SnakeTestService snakeTestService;
	 */

	public ValidationResponse isvalidRequest(Data request) {
		boolean isValid = true;
		ValidationResponse response = new ValidationResponse();
		StringBuilder message = new StringBuilder();

		/* Validating Dev, UserId, WfmId, WorkType are not null */
		/*
		 * if (StringUtils.isBlank(request.getDev())) { message.append(
		 * "    Dev is missing"); isValid = false; } else
		 */if (StringUtils.isBlank(request.getNewSnaketest().getUserid())) {
			message.append("    User ID is missing");
			isValid = false;
		} else if (StringUtils.isBlank(request.getNewSnaketest().getWfmId())) {
			message.append("    WFM ID is missing");
			isValid = false;
		} else if (StringUtils.isBlank(request.getNewSnaketest().getWorktype())) {
			message.append("    WorkType is missing");
			isValid = false;
		}
		/*
		 * Checking the number of BERTS in the request and make sure each BERT
		 * is distinct with no duplicates and not null.
		 */

		List<BERTS> berts = request.getNewSnaketest().getBERTS();
		logger.info("Number of BERTS in the request :" + berts.size());
		if (berts.size() > 0) {
			for (int i = 0; i < berts.size(); i++) {
				BERTS firstbert = berts.get(i);
				if (StringUtils.isBlank(((BERTS) firstbert).getBERTID())) {
					message.append("    Invalid Request - BERDID is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getCID())) {
					message.append("    Invalid Request - CID is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getCLO())) {
					message.append("    CLO is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getInterfaceType())) {
					message.append("    InterfaceType is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getLogicalInterfaceA())) {
					message.append("    Logical Interface A is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getLogicalInterfaceZ())) {
					message.append("    Logical Interface Z is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getPhysicalInterfaceA())) {
					message.append("    Physical Interface A is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getPhysicalInterfaceZ())) {
					message.append("    Physical Interface Z is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getRouterA())) {
					message.append("    Router A is missing" + "\n");
					isValid = false;
				}
				if (StringUtils.isBlank(((BERTS) firstbert).getRouterZ())) {
					message.append("    Router Z is missing" + "\n");
					isValid = false;
				}
				for (int j = i + 1; j < berts.size(); j++) {

					BERTS secondbert = berts.get(j);

					if (!StringUtils.isBlank(firstbert.getLogicalInterfaceZ())
							&& !StringUtils.isBlank(secondbert.getLogicalInterfaceZ())
							&& firstbert.getLogicalInterfaceZ().equals(secondbert.getLogicalInterfaceZ())) {
						message.append("    Duplicate Logical Interface Z's was found " + " "
								+ secondbert.getLogicalInterfaceZ() + " for BERDID :" + secondbert.getBERTID()
								+ " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

					if (!StringUtils.isBlank(firstbert.getBERTID()) && !StringUtils.isBlank(secondbert.getBERTID())
							&& firstbert.getBERTID().equals(secondbert.getBERTID())) {
						message.append("    Duplicate BERT ID's was found for " + " " + secondbert.getBERTID()
								+ " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

					if (!StringUtils.isBlank(firstbert.getPhysicalInterfaceA())
							&& !StringUtils.isBlank(secondbert.getPhysicalInterfaceA())
							&& firstbert.getPhysicalInterfaceA().equals(secondbert.getPhysicalInterfaceA())) {
						message.append("    Duplicate Physical Interface A's was found " + " "
								+ secondbert.getPhysicalInterfaceA() + " for BERDID :" + secondbert.getBERTID()
								+ " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

					if (!StringUtils.isBlank(firstbert.getLogicalInterfaceA())
							&& !StringUtils.isBlank(secondbert.getLogicalInterfaceA())
							&& firstbert.getLogicalInterfaceA().equals(secondbert.getLogicalInterfaceA())) {
						message.append("    Duplicate Logical Interface A's was found " + " "
								+ secondbert.getLogicalInterfaceA() + " for BERDID :" + secondbert.getBERTID()
								+ " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

					if (!StringUtils.isBlank(firstbert.getPhysicalInterfaceZ())
							&& !StringUtils.isBlank(secondbert.getPhysicalInterfaceZ())
							&& firstbert.getPhysicalInterfaceZ().equals(secondbert.getPhysicalInterfaceZ())) {
						message.append("    Duplicate Physical Interface Z's was found " + " "
								+ secondbert.getPhysicalInterfaceZ() + " for BERDID :" + secondbert.getBERTID()
								+ " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

					if (!StringUtils.isBlank(firstbert.getCID()) && !StringUtils.isBlank(secondbert.getCID())
							&& firstbert.getCID().equals(secondbert.getCID())) {
						message.append("    Duplicate CID's was found " + " " + secondbert.getCID() + " for BERDID :"
								+ secondbert.getBERTID() + " comparing with BERDID :" + firstbert.getBERTID() + "\n");
						isValid = false;
					}

				}

			}

		} else {
			logger.info("No BERTS were found");
			message.append("No BERTS were found" + "\n");
			isValid = false;
		}
		response.setStatus(isValid);
		if (!isValid) {
			logger.info("Validation Failed :" + message.toString());
			response.setErrorMessage("Invalid Request:: Validation Failed");
			response.setErrorDescription(message.toString());
		}

		return response;
	}
	/*
	 * Method to check if the Router Type is in DB, if not get it from the
	 * topology. If unable to determine the routerType, return the error
	 * response to WFM.
	 */

	public ValidationResponse checkModelType(Data request) throws CommonServiceException {
		ValidationResponse response = new ValidationResponse();
		String routerA = null;
		String routerZ = null;
		String modelTypeA = null;
		String modelTypeZ = null;
		boolean isValid = true;
		boolean isExist = true;
		boolean isInsert = true;

		Map<String, String> model = new HashMap<>();
		StringBuilder message = new StringBuilder();
		List<BERTS> berts = request.getNewSnaketest().getBERTS();
		for (int i = 0; i < berts.size(); i++) {
			BERTS bertList = berts.get(i);
			routerA = bertList.getRouterA();
			routerZ = bertList.getRouterZ();

			isExist = snakeTestDao.isRouterTypeExist(routerA.trim());
			if (!isExist) {
				logger.info("RouterType doesn't exist in database.Getting Topology....");
				try {
		//			String xml = commonService.getTopology("abc", false, bertList.getCID(), "kadiyve");
		//			modelTypeA = ReadXML.getDeviceTypeByXMLString(xml, routerA.trim());
					modelTypeA = ReadXML.getDeviceType("C://SourceXML//xml.xml ", routerA.trim());
					if (StringUtils.isBlank((modelTypeA))) {
						isValid = false;
						message.append("    Can't find the Device Type for routerA--" + routerA + " for CID="
								+ bertList.getCID() + "\n");
						response.setErrorDescription(message.toString());
						return response;
					} else {
						model.put(routerA, modelTypeA);
					}
				} catch (Exception e) {
					e.printStackTrace();
					isValid = false;
					message.append("Failed to get Topology for the Circuit  " + bertList.getCID());
					logger.error("Failed to get Topology " + e);
					response.setErrorDescription(message.toString());
					return response;
				}
				
			}

			isExist = snakeTestDao.isRouterTypeExist(routerZ.trim());
			if (!isExist) {
				logger.info("RouterType doesn't exist in database.Getting Topology....");
				try {
		//			String xmlfile = commonService.getTopology("abc", false, bertList.getCID(), "kadiyve");
		//			modelTypeZ = ReadXML.getDeviceTypeByXMLString(xmlfile, routerZ);
					modelTypeZ = ReadXML.getDeviceType("C://SourceXML//xml.xml ", routerZ);
					if (StringUtils.isBlank((modelTypeZ))) {
						isValid = false;
						message.append("    Can't find the Device Type for routerZ--" + routerZ + " for CID="
								+ bertList.getCID() + "\n");
						response.setErrorDescription(message.toString());
						return response;
					} else {
						model.put(routerZ, modelTypeZ);

					}
				} catch (Exception e) {
					e.printStackTrace();
					isValid = false;
					message.append("Failed to get Topology for the Circuit  " + bertList.getCID());
					logger.error("Failed to get Topology " + e);
					response.setErrorDescription(message.toString());
					return response;
				}
				
			}
		}
		response.setStatus(isValid);
		if (model.size() > 0 && isValid) {

			isInsert = snakeTestDao.insertRouterType(model);
		}
		if (!isInsert) {

			response.setErrorMessage("Error in inserting RouterType into database...");
			response.setErrorDescription(message.toString());
		} else {

			/*
			 * * Check if any of the BERTS are already in database[BERT] based
			 * on BERTID. If exists, check if it is in running(active). If
			 * active stop and throw an error to WFM.
			 */
			response = checkBERT(request);

		}

		return response;
	}

	@SuppressWarnings("unchecked")
	public ValidationResponse checkBERT(Data request) {
		ValidationResponse response = new ValidationResponse();
		boolean isActive = true;
		boolean isSame = true;
		boolean isValid = true;
		boolean isExist = true;
		boolean isInsert = true;
		boolean isUpate = false;
		BERTS bertDetails = new BERTS();
		StringBuilder message = new StringBuilder();
		List<String> list = new ArrayList<String>();
		List<BERTS> bertList = request.getNewSnaketest().getBERTS();
		if (bertList.size() > 0) {
			for (int i = 0; i < bertList.size(); i++) {
				BERTS firstbert = bertList.get(i);
				String bertId = firstbert.getBERTID();
				isActive = snakeTestDao.isBertActive(bertId);
				if (isActive) {
					isValid = false;
					logger.info("Throw an error to WFM.");
					message.append("BERT is already in running state....");
					response.setErrorDescription(message.toString());
					return response;
				}else{
					isExist = snakeTestDao.isBertIdExist(bertId);
				}
				if (!isExist) {
					
					list = snakeTestDao.insertBert(bertList);
					
					
					if (list.size()>0) {
						logger.info("Get each BERT_ID and add in snaketest table to get test ID "
								+ "and take the testID and each BERT ID and insert in bundle and bundle_status table...");
					}
					logger.info("Done");
				}
				 else {
				//	 List<BERTS> berts = request.getNewSnaketest().getBERTS();
						//for (int i = 0; i < berts.size(); i++) {
							//BERTS firstbert = berts.get(i);
					//String bertId = firstbert.getBERTID();
					bertDetails = snakeTestDao.getBertDetails(bertId);
					BERTS bert = new BERTS();
					logger.info("Compare it with the input request");
					bert.setBERTID(firstbert.getBERTID());
					if (!bertDetails.getCID().equals(firstbert.getCID())) {
						isSame = false;
						bert.setCID(firstbert.getCID());
					} else {
						bert.setCID(bertDetails.getCID());
					}
					if (!bertDetails.getCLO().equals(firstbert.getCLO())) {
						isSame = false;
						bert.setCLO(firstbert.getCLO());
					} else {
						bert.setCLO(bertDetails.getCLO());
					}
					if (!bertDetails.getInterfaceType().equals(firstbert.getInterfaceType())) {
						isSame = false;
						bert.setInterfaceType(firstbert.getInterfaceType());
					} else {
						bert.setInterfaceType(bertDetails.getInterfaceType());
					}
					if (!bertDetails.getRouterA().equals(firstbert.getRouterA())) {
						isSame = false;
						bert.setRouterA(firstbert.getRouterA());
					} else {
						bert.setRouterA(bertDetails.getRouterA());
					}
					if (!bertDetails.getPhysicalInterfaceA().equals(firstbert.getPhysicalInterfaceA())) {
						isSame = false;
						bert.setPhysicalInterfaceA(firstbert.getPhysicalInterfaceA());
					} else {
						bert.setPhysicalInterfaceA(bertDetails.getPhysicalInterfaceA());
					}
					if (!bertDetails.getLogicalInterfaceZ().equals(firstbert.getLogicalInterfaceZ())) {
						isSame = false;
						bert.setLogicalInterfaceZ(firstbert.getLogicalInterfaceZ());
					} else {
						bert.setLogicalInterfaceZ(bertDetails.getLogicalInterfaceZ());
					}
					if (!bertDetails.getRouterZ().equals(firstbert.getRouterZ())) {
						isSame = false;
						bert.setRouterZ(firstbert.getRouterZ());
					} else {
						bert.setRouterZ(bertDetails.getRouterZ());
					}
					if (!bertDetails.getPhysicalInterfaceZ().equals(firstbert.getPhysicalInterfaceZ())) {
						isSame = false;
						bert.setPhysicalInterfaceZ(firstbert.getPhysicalInterfaceZ());
					} else {
						bert.setPhysicalInterfaceZ(bertDetails.getPhysicalInterfaceZ());
					}
					if (!bertDetails.getLogicalInterfaceA().equals(firstbert.getLogicalInterfaceA())) {
						isSame = false;
						bert.setLogicalInterfaceA(firstbert.getLogicalInterfaceA());
					} else {
						bert.setLogicalInterfaceA(bertDetails.getLogicalInterfaceA());
					}
					bert.setVersion(bertDetails.getVersion());
					if (!isSame) {
						isUpate = snakeTestDao.updateBertDetails(bert);
						/*if (isUpate && isInsert)
							response = generateTestId(request);*/
					}
						//}
				}
			
		  }
			response.setStatus(isValid);
			if (!isValid) {
				response.setErrorMessage("Invalid Request:: Validation Failed");
				response.setErrorDescription(message.toString());
			}
	
		}
		return response;
	}

	public ValidationResponse generateTestId(Data request) {
		ValidationResponse response = new ValidationResponse();
		StringBuilder message = new StringBuilder();
		boolean isValid = false;

		snakeTestDao.inserTestIdDetails(request);

		response.setStatus(isValid);
		if (!isValid) {
			response.setErrorMessage("Invalid Request:: Validation Failed");
			response.setErrorDescription(message.toString());
		}
		return response;

	}

}