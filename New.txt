package com.verizon.wfm.core.service.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

import net.sf.json.JSONObject;
import net.sf.json.xml.XMLSerializer;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.verizon.wfm.core.dao.SnakeTestDao;
import com.verizon.wfm.core.dao.WFMUtilsDaoI;
import com.verizon.wfm.core.dao.WfmSequenceDao;
import com.verizon.wfm.core.exception.WFMException;
import com.verizon.wfm.core.service.SnakeTestService;

@Component("snakeTestService")
public class SnakeTestServiceImpl implements SnakeTestService {

	private static final Logger logger = Logger.getLogger(SnakeTestServiceImpl.class);
	
	@Autowired 
	private WFMUtilsDaoI wfmUtilDao;
	
	@Autowired
	@Qualifier("wfmSequenceDao")
	private WfmSequenceDao wfmSequenceDao;
	
	@Autowired 
	private SnakeTestDao snakeTestDao;
	
	@SuppressWarnings("finally")
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
	public JSONObject invokeSnakeTestRequest(JSONObject jsonObj) throws Exception {
		
		StringBuffer res = new StringBuffer();
		String snakeTestId = "";
		String errorMessage="";
		String requestData = jsonObj.getString("xmlJson");
		JSONObject dbJson = (JSONObject) jsonObj.get("dbJson");
		dbJson.put("wfmJobId", "");
 		HttpURLConnection conn = null;
		jsonObj.put("result","failure"); 
		logger.info(":::: Running invokeSnakeTestRequest in ServiceImpl ::::" + jsonObj);
		try {
			String payload = null;
			try {
				XMLSerializer serializer = new XMLSerializer();
				serializer.setRootName("data");
				// serializer.addNamespace("result1", "http://www.verizon.com");
				serializer.isRemoveNamespacePrefixFromElements();
				serializer.setTypeHintsEnabled(false);
				serializer.setElementName("BERT");
				payload = serializer.write((JSONObject) jsonObj.get("xmlJson"));
				payload = payload.replaceAll("<BERTS>|</BERTS>", "");
				payload = "xml="+payload;
				logger.info(":::: Generated payload ::::" + payload);
			} catch (Exception e) {
				logger.error(":::: Exception in the XMLLLL Method ::::" + e.getLocalizedMessage());
			} finally {
				logger.info(":::: JSON to XML Conversion completed ::::");
			}
			dbJson.put("transactionId",snakeTestDao.getMaxTransactionId());
			snakeTestDao.beginTransaction(dbJson,requestData);
			
			Map<String,String> paramMap = wfmUtilDao.getNCProperties("SNAKE_TEST_URL"); 
			logger.info(":::: Snake Test URL is ::::" +paramMap.get("SNAKE_TEST_URL")); 
			/*
			 * 
			 * HttpClient client = new HttpClient();
			PostMethod method = new PostMethod("http://10.15.13.154/wfm/wfm");
			method.setRequestBody(getData); 
			
			int respCode = client.executeMethod(method);
			if(200==respCode) {
				jsonObj.put("result","success"); 
			}
			
			*
			*/
			URL url = new URL(paramMap.get("SNAKE_TEST_URL")); 
			conn = (HttpURLConnection)url.openConnection();
	        conn.setRequestMethod("POST");
	        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
	        conn.setRequestProperty("Content-Length", String.valueOf(payload.length()));
	        conn.setDoOutput(true);
	        byte[] postDataBytes = payload.toString().getBytes("UTF-8");
	        conn.getOutputStream().write(postDataBytes);
			
	        jsonObj.put("result",conn.getResponseCode() == 200 ? "success" : "failure"); 
	        
	        Reader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
	        for ( int c = in.read(); c != -1; c = in.read() )
	        	res.append((char)c); 
	        
	  
	        logger.info(":::: Response XML from SnakeTest ::::"+res.toString()); 
	        if(res.indexOf("<testid>") > -1){
	        	snakeTestId = res.substring((res.indexOf("<testid>")+8), res.indexOf("</testid>"));
	        	dbJson.put("wfmJobId", wfmSequenceDao.getWFMJobIdNextVal()+""); 
		        dbJson.put("snakeTestId", snakeTestId);  
		        logger.info(":::: Request SnakeTestID["+dbJson.get("snakeTestId")+"]::WfmJobId["+dbJson.get("wfmJobId")+"]::::"); 
		        snakeTestDao.insertTransaction(dbJson);
		        //dbJson.put("statusDesc","Transaction Completed Sucessfully");
	        }else if(res.indexOf("<error>") > -1){
	        	errorMessage=res.substring((res.indexOf("<error>")+7), res.indexOf("</error>"));
	        	 dbJson.put("errorMessage", errorMessage);
	        	logger.info(":::: Not found <testid> tag in the response XML ::::");
	        	//snakeTestId = dbJson.getString("wfmJobId");  
	        }
	        jsonObj.put("response",res.toString());  
	        
	     
	        
		} catch (MalformedURLException e) {
			logger.error(":::: MalformedURLException Exception in the invokeSnakeTestRequest Method ::::" +e.getLocalizedMessage());
			jsonObj.put("error",e.getLocalizedMessage());
			//jsonObj.put("statusDesc","Transaction Failed");
			throw new WFMException(jsonObj.toString());   
		} catch (IOException e) {
			logger.error(":::: IOException Exception in the invokeSnakeTestRequest Method ::::" + e.getLocalizedMessage());
			jsonObj.put("error",e.getLocalizedMessage()); 
			//jsonObj.put("statusDesc","Transaction Failed");
			throw new WFMException(jsonObj.toString());
		} catch (Exception e) {
			logger.error(":::: Exception in the invokeSnakeTestRequest Method ::::" + e.getLocalizedMessage());
			jsonObj.put("error",e.getLocalizedMessage());
			//jsonObj.put("statusDesc","Transaction Failed");
			throw new WFMException(jsonObj.toString());
		} finally {
			logger.error("::::::::::::::: Finally Block ::::::::::::::::; ");
			if (null != conn) {
				conn.disconnect();
			}
			dbJson.put("status", jsonObj.get("result").equals("success") ? "Success" : "Failed");
			snakeTestDao.completeTransaction(dbJson,res.toString());
			return jsonObj;
		}
		
	}
	
	
	
}
